definitions:
  models.CreationSuccessResponse:
    properties:
      Product created with id:
        type: string
      productData:
        $ref: '#/definitions/models.Product'
    type: object
  models.Credentials:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.ErrorResponse:
    properties:
      Error:
        type: string
    type: object
  models.ListGrocerySuccessResponse:
    properties:
      message:
        type: string
      next page: {}
      number of products:
        type: integer
      page:
        type: integer
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
    type: object
  models.Product:
    properties:
      Brand:
        type: string
      Category:
        type: string
      CountryofOrigin:
        type: string
      ImageURL:
        type: string
      ItemPackageQuantity:
        minimum: 1
        type: integer
      Manufacturer:
        type: string
      PackageInformation:
        type: string
      Price:
        minimum: 1
        type: integer
      ProductID:
        type: string
      ProductName:
        type: string
      ThumbnailURL:
        type: string
      Vegeterian:
        type: boolean
      Weight:
        type: string
    required:
    - Brand
    - Category
    - CountryofOrigin
    - ItemPackageQuantity
    - Manufacturer
    - PackageInformation
    - Price
    - ProductName
    - Weight
    type: object
  models.SuccessResponse:
    properties:
      Success:
        type: string
    type: object
  models.SuccessResponseJWT:
    properties:
      Success:
        type: string
      Token:
        type: string
    type: object
  models.UpdateSuccessResponse:
    properties:
      Product updated with id:
        type: string
      productData:
        $ref: '#/definitions/models.Product'
    type: object
host: us-central1-capstone-412502.cloudfunctions.net
info:
  contact: {}
  description: |-
    Grocery Management API (v1) is a RESTful service that allows you to manage grocery data.
    This API provides a set of endpoints to create, retrieve, update, and delete grocery records. It is designed to streamline the processes of managing grocery information in a grocery shop.
  title: Grocery Management System
  version: 1.0.0
paths:
  /createBulkUpload:
    post:
      consumes:
      - application/json
      description: Upload a CSV file containing grocery items and create them in bulk
      parameters:
      - description: CSV file containing grocery items
        in: formData
        name: csvfile
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - bearerToken: []
      summary: Create grocery items in bulk from a CSV file
      tags:
      - Grocery
  /createItem:
    post:
      consumes:
      - application/json
      description: Create a new grocery item with product information and an optional
        image
      parameters:
      - description: Image file (.jpg)
        in: formData
        name: Image
        type: file
      - in: formData
        name: Brand
        required: true
        type: string
      - in: formData
        name: Category
        required: true
        type: string
      - in: formData
        name: CountryofOrigin
        required: true
        type: string
      - in: formData
        minimum: 1
        name: ItemPackageQuantity
        required: true
        type: integer
      - in: formData
        name: Manufacturer
        required: true
        type: string
      - in: formData
        name: PackageInformation
        required: true
        type: string
      - in: formData
        minimum: 1
        name: Price
        required: true
        type: integer
      - in: formData
        name: ProductName
        required: true
        type: string
      - in: formData
        name: Vegeterian
        type: boolean
      - in: formData
        name: Weight
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreationSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - bearerToken: []
      summary: Create a new grocery item
      tags:
      - Grocery
  /deleteItem:
    delete:
      consumes:
      - application/json
      description: Delete a grocery item by providing the ProductId
      parameters:
      - description: ProductId of the grocery item to be deleted
        in: query
        name: ProductId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - bearerToken: []
      summary: Delete a grocery item
      tags:
      - Grocery
  /getItemById:
    get:
      consumes:
      - application/json
      description: Retrieve a grocery item by providing the DocumentId
      parameters:
      - description: DocumentId of the grocery item to be retrieved
        in: query
        name: ProductId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - bearerToken: []
      summary: Get a grocery item by DocumentId
      tags:
      - Grocery
  /listGrocery:
    get:
      consumes:
      - application/json
      description: Retrieve a list of grocery items with optional filters like productName,
        priceGreaterThan, priceLessThan, and category. Supports pagination.
      parameters:
      - description: Filter by product name
        in: query
        name: productName
        type: string
      - description: Filter by price greater than this value
        in: query
        name: priceGreaterThanOrEqualTo
        type: string
      - description: Filter by price less than this value
        in: query
        name: priceLessThanOrEqualTo
        type: string
      - description: Filter by price less than this value
        in: query
        name: priceEqualTo
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListGrocerySuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - bearerToken: []
      summary: List grocery items with optional filters and pagination
      tags:
      - Grocery
  /login:
    post:
      consumes:
      - application/json
      description: Login to access APIs
      parameters:
      - description: Credentials
        in: body
        name: RequestBody
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponseJWT'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - Authenticatuion
  /updateItem:
    put:
      consumes:
      - application/json
      description: Update a grocery item by providing the ProductId and new product
        information
      parameters:
      - description: ProductId of the grocery item to be updated
        in: query
        name: ProductId
        required: true
        type: string
      - description: 'Optional: Updated image file (.jpg)'
        in: formData
        name: Image
        type: file
      - in: formData
        name: Brand
        required: true
        type: string
      - in: formData
        name: Category
        required: true
        type: string
      - in: formData
        name: CountryofOrigin
        required: true
        type: string
      - in: formData
        minimum: 1
        name: ItemPackageQuantity
        required: true
        type: integer
      - in: formData
        name: Manufacturer
        required: true
        type: string
      - in: formData
        name: PackageInformation
        required: true
        type: string
      - in: formData
        minimum: 1
        name: Price
        required: true
        type: integer
      - in: formData
        name: ProductName
        required: true
        type: string
      - in: formData
        name: Vegeterian
        type: boolean
      - in: formData
        name: Weight
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - bearerToken: []
      summary: Update a grocery item
      tags:
      - Grocery
schemes:
- https
securityDefinitions:
  bearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
